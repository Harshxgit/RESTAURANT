// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  number       String        @unique
  password     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  address      Address[]
  orders       Order[]
  reservations Reservation[]
}

model Address {
  id         Int    @id @default(autoincrement())
  addressid  Int
  pincode    Int
  streetRoad String
  colony     String
  area       String
  user       User   @relation(fields: [addressid], references: [id])
}

model Order {
  id            Int          @id @default(autoincrement())
  userId        Int
  user          User         @relation(fields: [userId], references: [id])
  status        OrderStatus?
  partysize     Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime?    @updatedAt
  item          OrderItem[]
  reservationid Int?         @unique
  Reservation   Reservation? @relation(fields: [reservationid], references: [id])
  type          String
  //instant order 
  //live order
}

model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  price       Float
  category    String
  categorytype String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model OrderItem {
  id       Int    @id @default(autoincrement())
  orderid  Int
  Order    Order  @relation(fields: [orderid], references: [id])
  quantity Int
  price    Float
  menuitem Json[]
}

model Reservation {
  id        Int                @id @default(autoincrement())
  userId    Int
  user      User               @relation(fields: [userId], references: [id])
  date      DateTime           @db.Date
  time      String
  partysize Int
  status    ReservationStatus?
  createdAt DateTime           @default(now())
  updatedAt DateTime?          @updatedAt
  TableId   Int
  table     Table              @relation(fields: [TableId], references: [id])
  order     Order?
}

model Table {
  id          Int           @id @default(autoincrement())
  tablenumber Int           @unique
  capacity    Int
  isAvailable Boolean       @default(true)
  reservation Reservation[]
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  ARCHIVED
}

enum OrderStatus {
  PENDING
  PREPARING
  DELIVERED
  READY
  CANCELLED
}
